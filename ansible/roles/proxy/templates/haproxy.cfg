global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	stdout format raw local0
    mode http
    option httplog
    option dontlognull

    timeout client 30s
    timeout server 30s
    timeout connect 5s

    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

frontend prometheus
  bind {{ tailscale_ip.stdout }}:8405
  mode http
  http-request use-service prometheus-exporter if { path /metrics }
  no log

frontend internal-https
  bind {{ tailscale_ip.stdout }}:443
  mode tcp
  option tcplog

  tcp-request inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }

  acl is_envoy_proxied req.ssl_sni -m str -i -f /etc/haproxy/envoy-domains.txt

  use_backend k8s-envoy-gateway-https if is_envoy_proxied
  use_backend k8s-ingress-https if !is_envoy_proxied

  default_backend no-match

frontend internal-k8s-api
  bind {{ tailscale_ip.stdout }}:6443
  mode tcp
  option tcplog

  use_backend k8s-api-backend

frontend external-http
  bind *:80
  mode http
  option tcplog

  redirect scheme https code 301

frontend external-https
  bind *:443
  mode tcp
  option tcplog

  stick-table type ip size 1m expire 30m store conn_rate(10s),conn_cur
  tcp-request connection track-sc0 src

  acl too_many_conns sc_conn_rate(0) gt 30 # ACL if connection rate exceeds 100/10s
  acl too_many_current_conns sc_conn_cur(0) gt 10 # ACL if current connections exceed 50

  tcp-request content reject if too_many_conns or too_many_current_conns

  tcp-request inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }

  acl allowed_domain req.ssl_sni -m str -i -f /etc/haproxy/allowed-domains.txt
  acl is_envoy_proxied req.ssl_sni -m str -i -f /etc/haproxy/envoy-domains.txt

  use_backend k8s-ingress-https if allowed_domain !is_envoy_proxied
  use_backend k8s-envoy-gateway-https if allowed_domain is_envoy_proxied

  default_backend no-match

backend k8s-envoy-gateway-https
  mode tcp
  balance roundrobin
  retries 3

  option tcp-check

{% for backend in proxy_backends %}
  server {{ backend.name }} {{ backend.ip }}:8443 check maxconn 30 send-proxy-v2
{% endfor %}

backend k8s-ingress-https
  mode tcp
  balance roundrobin
  retries 3

  option ssl-hello-chk

{% for backend in proxy_backends %}
  server {{ backend.name }} {{ backend.ip }}:443 check maxconn 30 send-proxy-v2
{% endfor %}

backend k8s-api-backend
  mode tcp
  balance roundrobin
  retries 3

  option tcp-check

{% for backend in proxy_backends %}
  {% if backend.is_api_server %}
  server {{ backend.name }} {{ backend.ip }}:6443 check maxconn 30
  {% endif %}
{% endfor %}

backend no-match
    http-request deny deny_status 403
